{
  "meta": {
    "$_GET": [
      {
        "type": "text",
        "options": {
          "rules": {
            "core:required": {}
          }
        },
        "name": "key"
      }
    ]
  },
  "exec": {
    "steps": [
      {
        "name": "get_pending_user",
        "module": "dbupdater",
        "action": "custom",
        "options": {
          "connection": "database",
          "sql": {
            "query": "SELECT id as useractionid, username, password, key\nFROM user_actions\nWHERE key = :P1 /* {{$_GET.key}} */ AND created >= NOW() - INTERVAL '1 DAY';",
            "params": [
              {
                "name": ":P1",
                "value": "{{$_GET.key}}",
                "test": "1"
              }
            ]
          }
        },
        "meta": [
          {
            "name": "useractionid",
            "type": "number"
          },
          {
            "name": "username",
            "type": "text"
          },
          {
            "name": "password",
            "type": "text"
          },
          {
            "name": "key",
            "type": "text"
          }
        ]
      },
      {
        "name": "",
        "module": "core",
        "action": "condition",
        "options": {
          "if": "{{get_pending_user[0].key==$_GET.key}}",
          "then": {
            "steps": [
              {
                "name": "insert_new_user",
                "module": "dbupdater",
                "action": "insert",
                "options": {
                  "connection": "database",
                  "sql": {
                    "type": "insert",
                    "values": [
                      {
                        "table": "users",
                        "column": "username",
                        "type": "text",
                        "value": "{{get_pending_user[0].username}}"
                      },
                      {
                        "table": "users",
                        "column": "password",
                        "type": "text",
                        "value": "{{get_pending_user[0].password}}"
                      },
                      {
                        "table": "users",
                        "column": "created",
                        "type": "datetime",
                        "value": "NOW()"
                      },
                      {
                        "table": "users",
                        "column": "updated",
                        "type": "datetime",
                        "value": "NOW()"
                      }
                    ],
                    "table": "users",
                    "returning": "id",
                    "query": "INSERT INTO users\n(username, password, created, updated) VALUES (:P1 /* {{get_pending_user[0].username}} */, :P2 /* {{get_pending_user[0].password}} */, 'NOW()', 'NOW()')",
                    "params": [
                      {
                        "name": ":P1",
                        "type": "expression",
                        "value": "{{get_pending_user[0].username}}",
                        "test": ""
                      },
                      {
                        "name": ":P2",
                        "type": "expression",
                        "value": "{{get_pending_user[0].password}}",
                        "test": ""
                      }
                    ]
                  }
                },
                "meta": [
                  {
                    "name": "identity",
                    "type": "text"
                  },
                  {
                    "name": "affected",
                    "type": "number"
                  }
                ]
              },
              {
                "name": "insert_usedkey",
                "module": "dbupdater",
                "action": "insert",
                "options": {
                  "connection": "database",
                  "sql": {
                    "type": "insert",
                    "values": [
                      {
                        "table": "user_usedkeys",
                        "column": "key",
                        "type": "text",
                        "value": "{{$_GET.key}}"
                      },
                      {
                        "table": "user_usedkeys",
                        "column": "created",
                        "type": "datetime",
                        "value": "NOW()"
                      },
                      {
                        "table": "user_usedkeys",
                        "column": "updated",
                        "type": "datetime",
                        "value": "NOW()"
                      }
                    ],
                    "table": "user_usedkeys",
                    "returning": "id",
                    "query": "INSERT INTO user_usedkeys\n(key, created, updated) VALUES (:P1 /* {{$_GET.key}} */, 'NOW()', 'NOW()')",
                    "params": [
                      {
                        "name": ":P1",
                        "type": "expression",
                        "value": "{{$_GET.key}}",
                        "test": ""
                      }
                    ]
                  }
                },
                "meta": [
                  {
                    "name": "identity",
                    "type": "text"
                  },
                  {
                    "name": "affected",
                    "type": "number"
                  }
                ]
              },
              {
                "name": "log_validated_user",
                "module": "dbupdater",
                "action": "insert",
                "options": {
                  "connection": "database",
                  "sql": {
                    "type": "insert",
                    "values": [
                      {
                        "table": "user_logs",
                        "column": "userid",
                        "type": "number",
                        "value": "{{insert_new_user.identity}}"
                      },
                      {
                        "table": "user_logs",
                        "column": "activity",
                        "type": "text",
                        "value": "User validated"
                      },
                      {
                        "table": "user_logs",
                        "column": "data",
                        "type": "text",
                        "value": "{{get_pending_user[0].username}}"
                      },
                      {
                        "table": "user_logs",
                        "column": "created",
                        "type": "datetime",
                        "value": "NOW()"
                      }
                    ],
                    "table": "user_logs",
                    "returning": "id",
                    "query": "INSERT INTO user_logs\n(userid, activity, data, created) VALUES (:P1 /* {{insert_new_user.identity}} */, 'User validated', :P2 /* {{get_pending_user[0].username}} */, 'NOW()')",
                    "params": [
                      {
                        "name": ":P1",
                        "type": "expression",
                        "value": "{{insert_new_user.identity}}",
                        "test": ""
                      },
                      {
                        "name": ":P2",
                        "type": "expression",
                        "value": "{{get_pending_user[0].username}}",
                        "test": ""
                      }
                    ]
                  }
                },
                "meta": [
                  {
                    "name": "identity",
                    "type": "text"
                  },
                  {
                    "name": "affected",
                    "type": "number"
                  }
                ]
              },
              {
                "name": "delete_user_action",
                "module": "dbupdater",
                "action": "delete",
                "options": {
                  "connection": "database",
                  "sql": {
                    "type": "delete",
                    "table": "user_actions",
                    "wheres": {
                      "condition": "AND",
                      "rules": [
                        {
                          "id": "key",
                          "field": "key",
                          "type": "string",
                          "operator": "equal",
                          "value": "{{$_GET.key}}",
                          "data": {
                            "column": "key"
                          },
                          "operation": "="
                        }
                      ],
                      "conditional": null,
                      "valid": true
                    },
                    "returning": "id",
                    "query": "DELETE\nFROM user_actions\nWHERE key = :P1 /* {{$_GET.key}} */",
                    "params": [
                      {
                        "operator": "equal",
                        "type": "expression",
                        "name": ":P1",
                        "value": "{{$_GET.key}}",
                        "test": ""
                      }
                    ]
                  }
                },
                "meta": [
                  {
                    "name": "affected",
                    "type": "number"
                  }
                ]
              },
              {
                "name": "refresh",
                "module": "sockets",
                "action": "refresh",
                "options": {
                  "action": "userauth/admin/info"
                }
              },
              {
                "name": "",
                "module": "core",
                "action": "condition",
                "options": {
                  "if": "{{$_ENV.EMAIL_SENDER!=null&&$_ENV.EMAIL_SENDER.length()>0&&$_ENV.EMAIL_SMTP_USER!=null&&$_ENV.EMAIL_SMTP_USER.length()>0&&$_ENV.EMAIL_SMTP_PASSWORD!=null&&$_ENV.EMAIL_SMTP_PASSWORD.length()>0&&$_ENV.EMAIL_SMTP_HOST!=null&&$_ENV.EMAIL_SMTP_HOST.length()>0&&$_ENV.EMAIL_SMTP_PORT!=null&&$_ENV.EMAIL_SMTP_PORT.length()>0&&$_ENV.EMAIL_NOTIFICATION_ADDRESS!=null&&$_ENV.EMAIL_NOTIFICATION_ADDRESS.length()>0}}",
                  "then": {
                    "steps": [
                      {
                        "name": "get_user",
                        "module": "dbconnector",
                        "action": "single",
                        "options": {
                          "connection": "database",
                          "sql": {
                            "type": "select",
                            "columns": [
                              {
                                "table": "users",
                                "column": "username"
                              }
                            ],
                            "params": [
                              {
                                "operator": "equal",
                                "type": "expression",
                                "name": ":P1",
                                "value": "{{insert_new_user.identity}}",
                                "test": ""
                              }
                            ],
                            "table": {
                              "name": "users"
                            },
                            "primary": "id",
                            "joins": [],
                            "wheres": {
                              "condition": "AND",
                              "rules": [
                                {
                                  "id": "users.id",
                                  "field": "users.id",
                                  "type": "double",
                                  "operator": "equal",
                                  "value": "{{insert_new_user.identity}}",
                                  "data": {
                                    "table": "users",
                                    "column": "id",
                                    "type": "number",
                                    "columnObj": {
                                      "type": "increments",
                                      "default": "",
                                      "primary": true,
                                      "unique": true,
                                      "nullable": false,
                                      "name": "id"
                                    }
                                  },
                                  "operation": "="
                                }
                              ],
                              "conditional": null,
                              "valid": true
                            },
                            "query": "select \"username\" from \"users\" where \"users\".\"id\" = ?"
                          }
                        },
                        "meta": [
                          {
                            "type": "text",
                            "name": "username"
                          }
                        ],
                        "outputType": "object"
                      },
                      {
                        "name": "",
                        "module": "mail",
                        "action": "send",
                        "options": {
                          "instance": "mail",
                          "subject": "New User Registration",
                          "fromName": "{{$_ENV.EMAIL_SENDER}}",
                          "fromEmail": "{{$_ENV.EMAIL_SENDER}}",
                          "toEmail": "{{$_ENV.EMAIL_NOTIFICATION_ADDRESS}}",
                          "body": "The following user has registered: {{get_user.username}}"
                        }
                      }
                    ]
                  }
                },
                "outputType": "boolean"
              }
            ]
          },
          "else": {
            "steps": [
              {
                "name": "check_usedkey",
                "module": "dbconnector",
                "action": "single",
                "options": {
                  "connection": "database",
                  "sql": {
                    "type": "SELECT",
                    "columns": [
                      {
                        "table": "user_usedkeys",
                        "column": "id"
                      }
                    ],
                    "params": [
                      {
                        "operator": "equal",
                        "type": "expression",
                        "name": ":P1",
                        "value": "{{$_GET.key}}",
                        "test": ""
                      }
                    ],
                    "table": {
                      "name": "user_usedkeys"
                    },
                    "primary": "id",
                    "joins": [],
                    "wheres": {
                      "condition": "AND",
                      "rules": [
                        {
                          "id": "user_usedkeys.key",
                          "field": "user_usedkeys.key",
                          "type": "string",
                          "operator": "equal",
                          "value": "{{$_GET.key}}",
                          "data": {
                            "table": "user_usedkeys",
                            "column": "key",
                            "type": "text",
                            "columnObj": {
                              "type": "text",
                              "primary": false,
                              "unique": false,
                              "nullable": true,
                              "name": "key"
                            }
                          },
                          "operation": "="
                        }
                      ],
                      "conditional": null,
                      "valid": true
                    },
                    "query": "SELECT id\nFROM user_usedkeys\nWHERE key = :P1 /* {{$_GET.key}} */"
                  }
                },
                "meta": [
                  {
                    "type": "number",
                    "name": "id"
                  }
                ],
                "outputType": "object"
              },
              {
                "name": "",
                "module": "core",
                "action": "condition",
                "options": {
                  "if": "{{check_usedkey.id>0}}",
                  "then": {
                    "steps": {
                      "name": "",
                      "options": {
                        "comment": "Do same as validation path as key is/was valid"
                      }
                    }
                  },
                  "else": {
                    "steps": [
                      {
                        "name": "log_validate_user_bad_key",
                        "module": "dbupdater",
                        "action": "insert",
                        "options": {
                          "connection": "database",
                          "sql": {
                            "type": "insert",
                            "values": [
                              {
                                "table": "user_logs",
                                "column": "activity",
                                "type": "text",
                                "value": "Validate user bad key"
                              },
                              {
                                "table": "user_logs",
                                "column": "data",
                                "type": "text",
                                "value": "{{$_GET.key}}"
                              },
                              {
                                "table": "user_logs",
                                "column": "created",
                                "type": "datetime",
                                "value": "NOW()"
                              }
                            ],
                            "table": "user_logs",
                            "returning": "id",
                            "query": "INSERT INTO user_logs\n(activity, data, created) VALUES ('Validate user bad key', :P1 /* {{$_GET.key}} */, 'NOW()')",
                            "params": [
                              {
                                "name": ":P1",
                                "type": "expression",
                                "value": "{{$_GET.key}}",
                                "test": ""
                              }
                            ]
                          }
                        },
                        "meta": [
                          {
                            "name": "identity",
                            "type": "text"
                          },
                          {
                            "name": "affected",
                            "type": "number"
                          }
                        ]
                      },
                      {
                        "name": "refresh1",
                        "module": "sockets",
                        "action": "refresh",
                        "options": {
                          "action": "userauth/admin/info"
                        }
                      },
                      {
                        "name": "",
                        "module": "core",
                        "action": "response",
                        "options": {
                          "status": 404,
                          "data": "Key not found"
                        }
                      }
                    ]
                  }
                },
                "outputType": "boolean"
              }
            ]
          }
        },
        "outputType": "boolean"
      }
    ]
  }
}